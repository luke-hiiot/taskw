// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cli

import (
	"github.com/google/wire"
	"github.com/nkaewam/taskw/internal/cli/clean"
	"github.com/nkaewam/taskw/internal/cli/file"
	"github.com/nkaewam/taskw/internal/cli/generation"
	"github.com/nkaewam/taskw/internal/cli/project"
	"github.com/nkaewam/taskw/internal/cli/scan"
	"github.com/nkaewam/taskw/internal/cli/ui"
	"github.com/nkaewam/taskw/internal/config"
)

// Injectors from wire.go:

// InitializeContainer initializes the dependency injection container
func InitializeContainer(configPath string) (*Container, error) {
	service := ui.ProvideUIService()
	projectService := project.ProvideProjectService(service)
	configConfig, err := config.ProvideConfig()
	if err != nil {
		return nil, err
	}
	scanService := scan.ProvideScanService(configConfig, service)
	fileService := file.ProvideFileService()
	generationService := generation.ProvideGenerationService(configConfig, service, fileService)
	cleanService := clean.ProvideCleanService(configConfig, service, fileService)
	container := &Container{
		UI:         service,
		Project:    projectService,
		Scan:       scanService,
		Generation: generationService,
		Clean:      cleanService,
		File:       fileService,
		Config:     configConfig,
	}
	return container, nil
}

// wire.go:

// Container holds all the injected services
type Container struct {
	UI         ui.Service
	Project    project.Service
	Scan       scan.Service
	Generation generation.Service
	Clean      clean.Service
	File       file.Service
	Config     *config.Config
}

// ServiceSet is the Wire provider set for all CLI services
var ProviderSet = wire.NewSet(
	GeneratedProviderSet,
)
