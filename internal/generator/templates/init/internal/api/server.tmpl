package api

import (
	"github.com/gofiber/fiber/v2"
	"go.uber.org/zap"

	"{{.Module}}/internal/health"
)

// Server holds all the handlers and dependencies
type Server struct {
	logger *zap.Logger
	healthHandler *health.Handler
}

// ProvideServer creates a new server with all dependencies
func ProvideServer(
	logger *zap.Logger,
	healthHandler *health.Handler,
) *Server {
	return &Server{
		logger: logger,
		healthHandler: healthHandler,
	}
}

// ProvideFiberApp creates a new Fiber application
func ProvideFiberApp() *fiber.App {
	return fiber.New(fiber.Config{
		AppName: "{{.ProjectName}} API",
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return c.Status(code).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})
}

// ProvideLogger creates a new Zap logger
func ProvideLogger() (*zap.Logger, error) {
	return zap.NewDevelopment()
}
