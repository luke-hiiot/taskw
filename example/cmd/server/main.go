package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/example/ecommerce-api/internal/api"
	"github.com/gofiber/contrib/swagger"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"

	_ "github.com/example/ecommerce-api/docs" // swagger docs
)

//	@title			E-commerce API
//	@version		1.0
//	@description	A sample e-commerce API built with Go, Fiber, and Wire
//	@description	Generated using taskw - Go API Code Generator
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.example.com/support
//	@contact.email	support@example.com

//	@license.name	MIT
//	@license.url	https://opensource.org/licenses/MIT

//	@host		localhost:3000

//	@securityDefinitions.basic	BasicAuth

//	@externalDocs.description	OpenAPI
//	@externalDocs.url			https://swagger.io/resources/open-api/

func main() {
	fmt.Println("üöÄ Starting E-commerce API...")
	fmt.Println("üìã This example requires taskw to generate routes and dependencies")
	fmt.Println("")

	// Initialize the server using Wire (which uses taskw-generated providers)
	server, err := api.InitializeServer()
	if err != nil {
		log.Fatalf("‚ùå Failed to initialize server: %v\n\nüí° Did you run 'taskw generate' to create the required code?", err)
	}

	// Initialize Fiber app
	app := api.ProvideFiberApp()

	fmt.Println("‚úÖ Server initialized successfully (taskw-generated code is working!)")

	// Setup middleware
	setupMiddleware(app)

	// Setup routes (this will use taskw-generated route registration)
	setupRoutes(app, server)

	// Start server with graceful shutdown
	startServer(app)
}

func setupMiddleware(app *fiber.App) {
	// CORS middleware
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "Origin, Content-Type, Accept, Authorization",
		AllowMethods: "GET, POST, PUT, DELETE, OPTIONS",
	}))

	// Logger middleware
	app.Use(logger.New(logger.Config{
		Format: "[${time}] ${status} - ${method} ${path} - ${latency}\n",
	}))

	// Recover middleware
	app.Use(recover.New())
}

func setupRoutes(app *fiber.App, server *api.Server) {
	cfg := swagger.Config{
		BasePath: "",
		FilePath: "./docs/swagger.json",
		Path:     "docs",
		Title:    "Swagger API Docs",
	}

	app.Use(swagger.New(cfg))

	// Health check endpoint is now generated via taskw from health module

	// API routes - this uses taskw-generated route registration
	fmt.Println("üì° Registering API routes (generated by taskw)...")
	server.RegisterRoutes(app)

	// 404 handler
	app.Use(func(c *fiber.Ctx) error {
		return c.Status(404).JSON(fiber.Map{
			"error":   "Not Found",
			"message": fmt.Sprintf("Route '%s' not found", c.Path()),
			"note":    "Available routes were generated by taskw",
		})
	})

}

func startServer(app *fiber.App) {
	// Channel to listen for interrupt signal
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	// Start server in a goroutine
	go func() {
		port := os.Getenv("PORT")
		if port == "" {
			port = "3000"
		}

		fmt.Printf("üåê Server starting on port %s\n", port)
		fmt.Println("üìñ API Documentation:")
		fmt.Printf("   Swagger: http://localhost:%s/docs\n", port)
		fmt.Printf("   Health:  http://localhost:%s/health\n", port)
		fmt.Printf("   Users:   http://localhost:%s/api/v1/users\n", port)
		fmt.Printf("   Products: http://localhost:%s/api/v1/products\n", port)
		fmt.Printf("   Orders:  http://localhost:%s/api/v1/orders\n", port)
		fmt.Println("")
		fmt.Println("üß™ Test the API with the examples in README.md")
		fmt.Println("")

		if err := app.Listen(":" + port); err != nil {
			log.Fatalf("‚ùå Error starting server: %v", err)
		}
	}()

	// Wait for interrupt signal
	<-c
	fmt.Println("üõë Received shutdown signal...")
	fmt.Println("üîÑ Gracefully shutting down...")

	// Create a deadline for shutdown
	_, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Shutdown the server
	if err := app.Shutdown(); err != nil {
		log.Printf("‚ùå Server forced to shutdown: %v", err)
	}

	fmt.Println("‚úÖ Server shutdown complete")
}
