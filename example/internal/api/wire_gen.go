// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"github.com/example/ecommerce-api/internal/health"
	"github.com/example/ecommerce-api/internal/order"
	"github.com/example/ecommerce-api/internal/product"
	"github.com/example/ecommerce-api/internal/user"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeServer initializes the complete server with all dependencies
func InitializeServer() (*Server, error) {
	logger, err := provideLogger()
	if err != nil {
		return nil, err
	}
	repository := health.ProvideRepository()
	service := health.ProvideService(repository)
	handler := health.ProvideHandler(service)
	userRepository := user.ProvideRepository()
	userService := user.ProvideService(userRepository)
	userHandler := user.ProvideHandler(userService)
	productRepository := product.ProvideRepository()
	productService := product.ProvideService(productRepository)
	productHandler := product.ProvideHandler(productService)
	orderRepository := order.ProvideRepository()
	orderProductService := ProvideProductServiceAdapter(productService)
	orderUserService := ProvideUserServiceAdapter(userService)
	orderService := order.ProvideService(orderRepository, orderProductService, orderUserService)
	orderHandler := order.ProvideHandler(orderService)
	server := ProvideServer(logger, handler, userHandler, productHandler, orderHandler)
	return server, nil
}

// InitializeFiberApp initializes the Fiber app
func InitializeFiberApp() *fiber.App {
	app := provideFiberApp()
	return app
}

// wire.go:

// ProviderSet will be augmented by taskw generated dependencies
// This only contains infrastructure providers - taskw will add the rest
var ProviderSet = wire.NewSet(

	provideLogger,
	provideFiberApp,

	ProvideProductServiceAdapter,
	ProvideUserServiceAdapter,

	ProvideServer,

	GeneratedProviderSet,
)

// provideLogger creates a new zap logger
func provideLogger() (*zap.Logger, error) {
	logger, err := zap.NewDevelopment()
	if err != nil {
		return nil, err
	}
	return logger, nil
}

// provideFiberApp creates a new Fiber application
func provideFiberApp() *fiber.App {
	return fiber.New(fiber.Config{
		AppName: "E-commerce API",
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return c.Status(code).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})
}
