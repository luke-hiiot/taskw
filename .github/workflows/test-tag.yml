name: Test + Tag

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'
        
    - name: Install dependencies
      run: |
        go install github.com/go-task/task/v3/cmd/task@latest
        go install github.com/swaggo/swag/cmd/swag@latest
        go install github.com/google/wire/cmd/wire@latest
        
    - name: Build taskw binary for tests
      run: |
        mkdir -p bin
        go build -o bin/taskw main.go
        chmod +x bin/taskw
        echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
        
    - name: Run tests
      run: go test -v ./...
  
  tag:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Get previous tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: v0.0.0

      - name: Determine version increment
        id: version_increment
        run: |
          # Get commit messages since last tag
          COMMITS=$(git log ${{ steps.previoustag.outputs.tag }}..HEAD --pretty=format:"%s" --no-merges)
          
          echo "Commit messages since last tag:"
          echo "$COMMITS"
          
          # Initialize increment type
          INCREMENT="patch"
          
          # Check for breaking changes (major version)
          if echo "$COMMITS" | grep -qiE "(BREAKING CHANGE|!:)"; then
            INCREMENT="major"
            echo "Found breaking changes - major increment"
          # Check for features (minor version)
          elif echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.+\))?:"; then
            INCREMENT="minor"
            echo "Found features - minor increment"
          # Check for fixes (patch version)
          elif echo "$COMMITS" | grep -qiE "^(fix|bugfix)(\(.+\))?:"; then
            INCREMENT="patch"
            echo "Found fixes - patch increment"
          # Check for other conventional commit types that should trigger patch
          elif echo "$COMMITS" | grep -qiE "^(docs|style|refactor|perf|test|chore)(\(.+\))?:"; then
            INCREMENT="patch"
            echo "Found other changes - patch increment"
          else
            # If no conventional commits found, check if there are any changes at all
            if [ -z "$COMMITS" ]; then
              echo "No commits found since last tag - skipping"
              INCREMENT="skip"
            else
              INCREMENT="patch"
              echo "Found non-conventional commits - defaulting to patch increment"
            fi
          fi
          
          echo "increment=$INCREMENT" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        if: steps.version_increment.outputs.increment != 'skip'
        run: |
          CURRENT_TAG="${{ steps.previoustag.outputs.tag }}"
          INCREMENT="${{ steps.version_increment.outputs.increment }}"
          
          # Remove 'v' prefix if present
          VERSION=${CURRENT_TAG#v}
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}  
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on type
          case $INCREMENT in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Next version: $NEW_VERSION (increment: $INCREMENT)"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "increment_type=$INCREMENT" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.version_increment.outputs.increment != 'skip'
        run: |
          NEW_TAG="${{ steps.next_version.outputs.version }}"
          INCREMENT_TYPE="${{ steps.next_version.outputs.increment_type }}"
          
          echo "Creating tag: $NEW_TAG"
          
          # Create annotated tag with commit info
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create tag message based on increment type
          case $INCREMENT_TYPE in
            "major")
              TAG_MESSAGE="üöÄ Major release $NEW_TAG with breaking changes"
              ;;
            "minor")
              TAG_MESSAGE="‚ú® Minor release $NEW_TAG with new features"
              ;;
            "patch")
              TAG_MESSAGE="üêõ Patch release $NEW_TAG with fixes and improvements"
              ;;
          esac
          
          git tag -a "$NEW_TAG" -m "$TAG_MESSAGE"
          git push origin "$NEW_TAG"
          
          echo "Successfully created and pushed tag: $NEW_TAG"




    
